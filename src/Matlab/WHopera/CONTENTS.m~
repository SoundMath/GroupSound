% Atoms2Sig.m
%    function sig = Atoms2Sig(K,P,C)
%    % 
%    % Matlab code for constructing a signal out of Gabor atoms having the
%    % given parameters.
%    %
%    % Inputs
%    %   K     the output signal will have length 2^(K+1)
%
% beats2.m
%    function x = beats2(K, EX, DISP)
%    % beats2.m
%    %
%    % Matlab code for the demonstration of relation between interference
%    % energy and beat frequency.
%    %
%    % inputs
%
% beats3.m
%    function x = beats3(K, EX, DISP)
%    % beats3.m
%    %
%    % Matlab code for the demonstration of relation between interference
%    % energy and beat frequency.
%    %
%    % inputs
%
% beats-bak.m
%    function x = beats(K, intvl1, intvl2, DISP)
%    % beats.m
%    %
%    % Matlab code for the demonstration of relation between interference
%    % energy and beat frequency.
%    %
%    % inputs
%
% beats.m
%    function x = beats(K, intvl1, intvl2, DISP)
%    % beats.m
%    % function x = beats(K, intvl1, intvl2, DISP)
%    %
%    % Matlab code for the demonstration of relation between interference
%    % energy and beat frequency.
%    %
%
% disp2.m
%    
%    for n=1:N-1
%    xaxs(n+1) = xaxs(n) + n;
%    end;
%    figure(2); clf;
%    plot(xaxs,saWVI);
%    title('Instantaneous Interference (sum of |I|)');
%
% displaying.m
%    
%    DISP = 3;
%    
%    figure(DISP);clf;
%    yindxs = (N/32:N/8);     xindxs = (1:N); 
%    yaxs = yindxs.*(1/N); xaxs = linspace(0,1,N);
%    
%
% DisplayParams.m
%    function DisplayParams(string,P,n)
%    %
%    % Matlab code for displaying parameter values in MZMP.m program
%    % for debugging purposes.
%    %
%    % Inputs
%    %   string  a string to print preceding the parameters
%
% DMeasures.m
%    % DMeasures.m
%    % Matlab code for computing dissonance based on Wigner interferences.
%    %
%    % First measure:
%    
%    
%    
%
% example.m
%    function x = example(K, EX, DISP)
%    % example.m
%    %
%    % Matlab code for the demonstration of relation between interference
%    % energy and beat frequency.
%    %
%    % inputs
%
% figures.m
%    function figures(WVE, WVI, a, b, c)
%    
%    figure(a);clf;
%      absE = real(WVE);
%      tfmax = max(max(absE));
%      tfmin = min(min(absE));
%      colormap(1-gray(256));
%
% frequencies.m
%    function f = frequencies(nsteps,noct,f0)
%    % frequencies.m
%    %
%    % Matlab code to generate pitch scale frequencies
%    %
%    % Inputs
%    %    nsteps  (default nsteps=12)
%
% harmonics.m
%    function h = harmonics(K, f0, w)
%    %
%    % Matlab code for generating a harmonic tone of length N = pow2(K+1)
%    %
%    % inputs 
%    %   K   N = pow2(K+1) is the length of the output signal
%    %   f0  the base frequencies (unnormalized)
%
% Interpol2.m
%    function g = Interpol2(f);
%    %
%    % Interpolates signal f (length N ) to a signal g (length 2N)
%    % such that g(2*n) = f(n)
%    %
%    %
%    	f0   = f;
%
% IP.m
%    function [C, P] = IP(K,s0,a1,a2,DEBUG)
%    % IP.m
%    %
%    % Matlab code for computing the inner products of a 
%    % specified function with all atoms in a dictionary comprised of:
%    %    1. N Diracs, 
%    %    2. K Weyl-Heisenberg systems, 
%
% SamplingGroups.m
%    function [L1, M2, M1, L2] = SamplingGroups(K,s)
%    L1 = pow2(s-1);   % translation sampling rate
%    M2 = pow2(K-s);   % modulation sampling rate
%    M1 = 4*M2;        % dual of L1;  == pow2(K-s+2);
%    L2 = 4*L1;        % dual of M2;  == pow2(s+1);
%    %    %
% ScaledWindow.m
%    function g = ScaledWindow(N,s)
%    % Returns a window function properly scaled by S=pow2(s) and normalized to
%    % have unit norm
%    n = (-N/2+1:N/2);
%    S = pow2(s);
%    sc = (2^(.25)/sqrt(S));
%    g = sc.*exp(-pi*((n/S).^2));
%
% shift.m
%    function gp = shift(g, p)
%    % shift.m
%    %
%    % Translate input vector by p samples, with wrap around (ie circular)
%    %
%    %  Inputs
%    %    g   signal
%
% test1.m
%    % test1.m
%    % Matlab workspace for testing WHopera programs
%    %
%    %     1. Diracs, (N atoms)
%    %     2. K Weyl-Heisenberg systems, (2^(K+3) atoms per system)
%    %     3. complex exponentials (N atoms)
%    
%
% TEST1.m
%    % TEST1.m
%    %
%    % Matlab code for the demonstration of relation between interference
%    % energy and beat frequency.
%    %
%    %     K    (default = 8) signal length is N=pow2(K+1);
%    %     DISP (default = 0) DISP=1 ==> display signal
%
% test2.m
%    % test2.m
%    % Matlab workspace for testing WHopera programs
%    %
%    
%    K = 8;
%    N = pow2(K+1);
%    v0 = 55;
%
% TEST2.m
%    % TEST2.m
%    %
%    % Matlab code for the demonstration of relation between interference
%    % energy and beat frequency.
%    %
%    %     K    (default = 8) signal length is N=pow2(K+1);
%    %     DISP (default = 0) DISP=1 ==> display signal
%
% tests.m
%    K=8;
%    x = beats(K);          
%    [C,P]=IP(x,1);
%    N = pow2(K+1); 
%    NAtoms = 2*N + K*pow2(K+3);
%    k = N; 
%    WHatom(K,P(k,1),P(k,2),P(k,3));   
%
% WHatom.m
%    function g = WHatom(K,s,a1,a2,DISP)
%    %
%    % Matlab code for constructing a Gabor atom from the given parameters.
%    %
%    % You can also call WHatom like this
%    %    function g = WHatom(K,P,DISP)
%    % The program will parse parameters as:
%
% WHip.m
%    function G = WHip(f,s,L1,M2)
%    % WHip.m
%    %
%    % Matlab code for computing inner product of a function with all atoms in a
%    % Weyl-Heisenberg (WH) system (ie a subgroup of atoms)
%    %
%    % Inputs 
%
% WHMP.m
%    function [MaxC,MaxP]=WHMP(x,MAXITERS,TOLERANCE,OPT,DEBUG,DISP)
%    % WHMP.m 
%    % Matlab function for Weyl-Heisenberg Matching Pursuit (WHMP) algorithm.
%    %
%    % Inputs
%    %    x       analytic signal with which to correlate atoms;
%    %              signal length must be a power of 2
%
% WignerDist.m
%    function afwig = WignerDist(sig1,sig2)
%    % WignerDist -- Alias-Free Wigner-Ville Distribution
%    %  Usage
%    %    afwig = WignerDist(sig)
%    %  Inputs
%    %    sig1     1-d signal
%    %    sig2     an optional second 1-d signal; 
%
% WVEnergy.m
%    function [WVE, WVI] = WVEnergy(x, C, P, WVT, DEBUG, DISP)
%    % WVEnergy.m
%    %
%    % Matlab code for the demonstration of relation between interference
%    % energy and beat frequency.
%    %
%    % inputs
%
% WVfigures.m
%    function WVfigures(K,WVE, WVI, a, b, c)
%    N = pow2(K+1);
%    figure(a);clf;
%      absE = real(WVE);
%      tfmax = max(max(absE));
%      tfmin = min(min(absE));
%      colormap(1-gray(256));
%
% WVTrans_AFC.m
%    function afwig = WVTrans_AFC(sig1,sig2,DISP)
%    % WVTrans_AFC -- Alias-Free Cross Wigner Transform
%    %  Usage
%    %    afwig = WVDist_AFC(sig1,sig2,1)
%    %  Inputs
%    %    sig1    1-d signal
%    %    sig2    1-d signal
%
% WVTrans_AF.m
%    function afwig = WVTrans_AF(sig,DISP)
%    % WVDist_AF -- Alias-Free Wigner-Ville Distribution
%    %  Usage
%    %    afwig = WVDist_AF(sig)
%    %  Inputs
%    %    sig     1-d signal
%    %    DISP    DISP=1 => produce image plot of Wigner Transform
%
